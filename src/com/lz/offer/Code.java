package src.com.lz.offer;

/**
 * desc
 *
 * @author: liangzhen
 * @version: 1.0
 * @date: 2018-01-16
 * @since 1.8
 */

/**
 * 给定一个链表，只有头节点和一个结点，要求O(1)删除该结点
 * <p>
 * 分析：
 * 链表的特性我们知道，只有顺序遍历查找，那么时间复杂度为0(N) 那么我们如何实现O(1)的复杂度呢
 * <p>
 * 我们可以想象，我们删除节点，无非是把他里面的数据删除掉，那么我们可以把他的后一个节点的数据覆盖掉该结点，
 * 然后再把该结点的next 指向他下一个结点的下一个结点，这么做，其实就是删除了该结点的下一个结点，但是数据保存下来了
 * 不就是类似删除了该结点
 * <p>
 * ps 做算法，一定要开阔思维，不要太过保守，虽然是链表，我们就不一定要遍历他呀
 * <p>
 * <p>
 * ps2 计算的时候，基于上述思想，我们计算的时候，要分3种情况考虑
 * 1  删除的结点就是头结点  o(1)
 * 2 删除的结点是尾结点  o(n)
 * 3 删除的结点是 非头非尾巴  o（1）
 * <p>
 * 经过上述平均时间复杂度还是为O(1),但是我们基于这个算法的前提是，该结点属于链表
 */

public class Code {
}
